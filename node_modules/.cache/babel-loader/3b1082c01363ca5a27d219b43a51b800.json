{"ast":null,"code":"var _jsxFileName = \"/home/kaancaglan/dev/ZTP/ztp-ui/src/App.js\";\nimport React, { Component } from 'react';\nimport Tabs from './components/Tabs';\nimport { JsonToTable } from \"react-json-to-table\"; //import mongoose from 'mongoose/browser';\n\nrequire('./styles.css');\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.startInterval = 0;\n    this.state = {\n      bruteForceType: \"light\",\n      nmapOption: \"nmap --unprivileged -vv\",\n      bruteForcePath: \"/\",\n      publicKeyAuthentication: false,\n      username: \"\",\n      password: \"\",\n      publicKeyPath: \"\",\n      sshPort: \"22\",\n      targets: [],\n      target: \"\",\n      scan_started: false,\n      scan_status: -1,\n      sync_status: -1,\n      scan_id: -1,\n      show_report: false,\n      report0: {},\n      report1: {},\n      excluding_functions: [],\n      excluding_function: \"\"\n    };\n    this.handlePassword = this.handlePassword.bind(this);\n    this.handlePublicKeyPath = this.handlePublicKeyPath.bind(this);\n    this.handleUsername = this.handleUsername.bind(this);\n    this.handlePublicKeyAuthentication = this.handlePublicKeyAuthentication.bind(this);\n    this.handleAddToTargets = this.handleAddToTargets.bind(this);\n    this.handleTarget = this.handleTarget.bind(this);\n    this.handleExcludingFunction = this.handleExcludingFunction.bind(this);\n    this.handleSshPort = this.handleSshPort.bind(this);\n    this.handleBruteForcePath = this.handleBruteForcePath.bind(this);\n  }\n\n  componentDidMount() {}\n\n  componentWillUnmount() {\n    clearInterval(this.startInterval);\n  }\n\n  postAxios() {\n    fetch('http://127.0.0.1:8000').then(res => {\n      console.log(\"res: \", res);\n      res.json().then(val => console.log(\"val: \", val));\n    });\n  }\n\n  async isSyncOver() {\n    try {\n      const response = await fetch('http://127.0.0.1:8001/sync/status', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id: \"scanid\"\n        })\n      }); //const res = response.text();\n\n      const response_json = await response.json();\n      this.setState({\n        sync_status: 3,\n        sync_started: false\n      });\n      return response_json[\"status\"];\n    } catch (err) {\n      console.log(\"err: \", err);\n    }\n  }\n\n  async postGetStatus(scanid) {\n    try {\n      const response = await fetch('http://127.0.0.1:8001/scan/status', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id: scanid\n        })\n      }); //const res = response.text();\n\n      const response_json = await response.json();\n      console.log(\"response_json['status']: \", response_json);\n      const xd = JSON.parse(JSON.stringify(response_json));\n      console.log(\"xd: \", xd);\n\n      if (xd == 3) {\n        this.setState({\n          scan_status: 3,\n          scan_started: false\n        }); //alert(\"Scan is over, you can check the result!\");\n\n        return xd;\n      }\n    } catch (err) {\n      console.log(\"err: \", err);\n    }\n\n    return -1;\n  }\n\n  async postReq(isSync) {\n    if (!isSync) {\n      var scanid;\n      var targetsArr = \"[\\\"\";\n\n      for (let i = 0; i < this.state.targets.length; i++) {\n        if (i == this.state.targets.length - 1) {\n          targetsArr = targetsArr + this.state.targets[i] + \"\\\"]\";\n        } else {\n          targetsArr = targetsArr + this.state.targets[i] + \"\\\", \\\"\";\n        }\n      }\n\n      var excludingsArr = \"[\\\"\";\n\n      for (let i = 0; i < this.state.excluding_functions.length; i++) {\n        if (i == this.state.excluding_functions.length - 1) {\n          excludingsArr = excludingsArr + this.state.excluding_functions[i] + \"\\\"]\";\n        } else {\n          excludingsArr = excludingsArr + this.state.excluding_functions[i] + \"\\\", \\\"\";\n        }\n      }\n\n      if (this.state.excluding_functions.length == 0) excludingsArr = \"[\\\"\\\"]\";\n      var data = '{\\\"ssh-username\\\":\\\"' + this.state.username + '\\\", \\\"ssh-password\\\":\\\"' + this.state.password + '\\\", \\\"ssh-port\\\":\\\"' + this.state.sshPort + '\\\", \\\"targets\\\":' + targetsArr + ', \\\"nmap\\\":\\\"' + this.state.nmapOption + '\\\", \\\"brute-force-path\\\":\\\"' + this.state.bruteForcePath + '\\\", \\\"excluding_functions\\\":' + excludingsArr + ', \\\"brute-force-type\\\":\\\"' + this.state.bruteForceType + '\\\"}';\n      console.log(\"data is: \", data);\n\n      try {\n        const response = await fetch('http://127.0.0.1:8001/scan/new', {\n          method: 'POST',\n          //mode: 'no-cors', //methodu cors yaparsam \"net::ERR_EMPTY_RESPONSE\" hatasi aliyorum, no-cors yaparsam fetch basarılı oluyor fakat response.json() hata veriyor\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            data: data\n          })\n        }); //const res = response.text();\n\n        const response_json = await response.json();\n        scanid = response_json[\"$oid\"];\n        this.setState({\n          scan_id: scanid\n        });\n        console.log(\"response_json: \", response_json[\"$oid\"]);\n      } catch (err) {\n        console.log(\"err: \", err);\n      }\n\n      if (this.state.scan_status != 3) {\n        this.startInterval = setInterval(() => {\n          var status = this.postGetStatus(scanid);\n          console.log(\"status: \", status);\n\n          if (this.state.scan_status == 3) {\n            this.setState({\n              show_report: true\n            });\n            console.log(\"status is 3\");\n          } else {\n            console.log(\"status is not 3;\");\n          }\n        }, 2000);\n      }\n    } else {\n      try {\n        const response = await fetch('http://127.0.0.1:8001/sync/data', {\n          method: 'POST',\n          //mode: 'no-cors', //methodu cors yaparsam \"net::ERR_EMPTY_RESPONSE\" hatasi aliyorum, no-cors yaparsam fetch basarılı oluyor fakat response.json() hata veriyor\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            data: data\n          })\n        }); //const res = response.text();\n\n        const response_json = await response.json();\n        scanid = response_json[\"$oid\"];\n        this.setState({\n          scan_id: scanid\n        });\n        console.log(\"response_json: \", response_json[\"$oid\"]);\n      } catch (err) {\n        console.log(\"err: \", err);\n      }\n\n      var status = this.isSyncOver();\n      this.setState({\n        sync_started: false\n      }); //alert(\"Successfuly downloaded datas from server!\");\n\n      /*this.startInterval = setInterval(() => {\n        \n        console.log(\"status: \", status)\n        if(this.state.sync_status == 3){\n          this.setState({sync_started: false});\n          console.log(\"status is 3\")\n        }\n        else{\n          console.log(\"status is not 3;\")\n        }\n      }, 2000);*/\n    }\n  }\n\n  async handleShowReport() {\n    try {\n      const response = await fetch('http://127.0.0.1:8001/report/get', {\n        method: 'POST',\n        //mode: 'no-cors', //methodu cors yaparsam \"net::ERR_EMPTY_RESPONSE\" hatasi aliyorum, no-cors yaparsam fetch basarılı oluyor fakat response.json() hata veriyor\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id: this.state.scan_id\n        })\n      }); //const res = response.text();\n\n      const response_json = await response.json();\n      console.log(\"response_json:\", response_json);\n      console.log(\"report0:\", response_json[\"0\"]);\n      this.setState({\n        report0: response_json[\"targets\"][\"0\"],\n        report1: response_json[\"targets\"][\"1\"],\n        show_report: false\n      });\n    } catch (err) {\n      console.log(\"err: \", err);\n    }\n  }\n\n  handleClearTargets() {\n    this.setState({\n      targets: []\n    });\n  }\n\n  handleAddToTargets() {\n    let list = this.state.targets;\n    list.push(this.state.target);\n    this.setState({\n      targets: list,\n      target: \"\"\n    });\n  }\n\n  handleAddToExcludingFunctions() {\n    let list = this.state.excluding_functions;\n    list.push(this.state.excluding_function);\n    this.setState({\n      excluding_functions: list,\n      excluding_function: \"\"\n    });\n  }\n\n  handleSync() {\n    this.setState({\n      sync_started: true\n    });\n    this.postReq(true);\n  }\n\n  handleClick() {\n    if (this.state[\"username\"].length === 0) {\n      alert(\"username is empty pls add username!\");\n    } else if (this.state['targets'].length === 0) {\n      alert(\"targets empty pls add some targets from scan options page!\");\n    } else if (!this.state.publicKeyAuthentication && this.state['password'].length === 0) {\n      alert(\"password is empty pls add password!\");\n    } else if (this.state.publicKeyAuthentication && this.state[\"publicKeyPath\"].length === 0) {\n      alert(\"Public key path is empty pls add path!\");\n    }\n\n    for (var key in this.state) {\n      console.log(key, \": \", this.state[key]);\n    }\n\n    this.setState({\n      scan_started: true\n    });\n    this.postReq(false);\n  }\n\n  handleTarget(event) {\n    this.setState({\n      target: event.target.value\n    });\n  }\n\n  handleExcludingFunction(event) {\n    this.setState({\n      excluding_function: event.target.value\n    });\n  }\n\n  setBruteForceType(event) {\n    this.setState({\n      bruteForceType: event.target.value\n    });\n  }\n\n  setNmapOption(event) {\n    this.setState({\n      nmapOption: event.target.value\n    });\n  }\n\n  handlePassword(event) {\n    this.setState({\n      password: event.target.value\n    });\n  }\n\n  handlePublicKeyPath(event) {\n    this.setState({\n      publicKeyPath: event.target.value\n    });\n  }\n\n  handleUsername(event) {\n    this.setState({\n      username: event.target.value\n    });\n  }\n\n  handlePublicKeyAuthentication() {\n    this.setState({\n      publicKeyAuthentication: !this.state.publicKeyAuthentication\n    });\n  }\n\n  handleSshPort(event) {\n    this.setState({\n      sshPort: event.target.value\n    });\n  }\n\n  handleBruteForcePath(event) {\n    this.setState({\n      bruteForcePath: event.target.value\n    });\n  }\n\n  render() {\n    let passwordOrPublicKey;\n    let targetsPrint;\n    let excludingsPrint;\n\n    if (!this.state.publicKeyAuthentication) {\n      passwordOrPublicKey = React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }, \" Password: \", React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.password,\n        onChange: this.handlePassword,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }), \" \");\n    } else {\n      passwordOrPublicKey = React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }, \" Public Key Path: \", React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.publicKeyPath,\n        onChange: this.handlePublicKeyPath,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }), \" \");\n    }\n\n    if (this.state.targets.length === 0) {\n      targetsPrint = React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }, \" There are no targets!\");\n    } else {\n      targetsPrint = React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }, \"Targets: \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      }, this.state.targets.map(item => React.createElement(\"li\", {\n        key: item,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, item))));\n    }\n\n    if (this.state.excluding_functions.length === 0) {\n      excludingsPrint = React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      }, \" There are no excluding function!\");\n    } else {\n      excludingsPrint = React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      }, \"Excluding functions: \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      }), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }, this.state.excluding_functions.map(item => React.createElement(\"li\", {\n        key: item,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344\n        },\n        __self: this\n      }, item))));\n    }\n\n    let scan_started_or_not;\n    let sync_started_or_not;\n\n    if (!this.state.scan_started) {\n      scan_started_or_not = React.createElement(\"button\", {\n        onClick: this.handleClick.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352\n        },\n        __self: this\n      }, \"Start\");\n    } else {\n      scan_started_or_not = React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357\n        },\n        __self: this\n      }, \"Scanning...\");\n    }\n\n    if (!this.state.sync_started) {\n      sync_started_or_not = React.createElement(\"button\", {\n        onClick: this.handleSync.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361\n        },\n        __self: this\n      }, \"Sync Data From Server\");\n    } else {\n      sync_started_or_not = React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366\n        },\n        __self: this\n      }, \"Sync started, downloading datas...\");\n    }\n\n    let show_report_button;\n\n    if (this.state.show_report) {\n      show_report_button = React.createElement(\"button\", {\n        onClick: this.handleShowReport.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370\n        },\n        __self: this\n      }, \"Report is ready, show report!\");\n    }\n\n    var myJson;\n\n    if (Object.keys(this.state.report0).length != 0) {\n      console.log(\"this.state.report: \", this.state.report); //myJson = this.state.report;\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, \"ZTP\"), React.createElement(Tabs, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      label: \"Main Page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, scan_started_or_not, sync_started_or_not, show_report_button, React.createElement(JsonToTable, {\n      json: this.state.report0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }), React.createElement(JsonToTable, {\n      json: this.state.report1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      label: \"Scan Options\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, \"Use Public Key Authentication \", React.createElement(\"input\", {\n      type: \"checkbox\",\n      defaultChecked: this.state.publicKeyAuthentication,\n      onChange: this.handlePublicKeyAuthentication,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }), \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, \" Username: \", React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.username,\n      onChange: this.handleUsername,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }), \" \"), passwordOrPublicKey, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, \" SSH Port: \", React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.sshPort,\n      onChange: this.handleSshPort,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }), \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }), \"Select Brute Force Type\", React.createElement(\"div\", {\n      onChange: this.setBruteForceType.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"radio\",\n      value: \"light\",\n      name: \"bruteforce\",\n      checked: this.state.bruteForceType === \"light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }), \" light\", React.createElement(\"input\", {\n      type: \"radio\",\n      value: \"medium\",\n      name: \"bruteforce\",\n      checked: this.state.bruteForceType === \"medium\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }), \" medium\", React.createElement(\"input\", {\n      type: \"radio\",\n      value: \"heavy\",\n      name: \"bruteforce\",\n      checked: this.state.bruteForceType === \"heavy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }), \" heavy\", React.createElement(\"input\", {\n      type: \"radio\",\n      value: \"optional\",\n      name: \"bruteforce\",\n      checked: this.state.bruteForceType === \"optional\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }), \" optional\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }), \"Enter Brute Force File Path (Needed to check optional, otherwise this wont be active.) (Example path: /home/username/passwords.txt)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, \"Path: \", React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.bruteForcePath,\n      onChange: this.handleBruteForcePath,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }), \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }), \"Select Nmap Option\", React.createElement(\"div\", {\n      onChange: this.setNmapOption.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"radio\",\n      value: \"nmap --unprivileged -vv\",\n      name: \"nmap\",\n      checked: this.state.nmapOption === 'nmap --unprivileged -vv',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }), \" nmap --unprivileged -vv\", React.createElement(\"input\", {\n      type: \"radio\",\n      value: \"nmap -sS -T4\",\n      name: \"nmap\",\n      checked: this.state.nmapOption === 'nmap -sS -T4',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }), \" nmap -sS -T4\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, \" Excluding Function: \", React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.excluding_function,\n      onChange: this.handleExcludingFunction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }), \" \"), React.createElement(\"button\", {\n      onClick: this.handleAddToExcludingFunctions.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, \"Add To Excluding Functions\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }), excludingsPrint, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }, \" Target: \", React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.target,\n      onChange: this.handleTarget,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }), \" \"), React.createElement(\"button\", {\n      onClick: this.handleAddToTargets.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }, \"Add To Targets\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }), targetsPrint)));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/kaancaglan/dev/ZTP/ztp-ui/src/App.js"],"names":["React","Component","Tabs","JsonToTable","require","App","constructor","props","startInterval","state","bruteForceType","nmapOption","bruteForcePath","publicKeyAuthentication","username","password","publicKeyPath","sshPort","targets","target","scan_started","scan_status","sync_status","scan_id","show_report","report0","report1","excluding_functions","excluding_function","handlePassword","bind","handlePublicKeyPath","handleUsername","handlePublicKeyAuthentication","handleAddToTargets","handleTarget","handleExcludingFunction","handleSshPort","handleBruteForcePath","componentDidMount","componentWillUnmount","clearInterval","postAxios","fetch","then","res","console","log","json","val","isSyncOver","response","method","headers","body","JSON","stringify","id","response_json","setState","sync_started","err","postGetStatus","scanid","xd","parse","postReq","isSync","targetsArr","i","length","excludingsArr","data","setInterval","status","handleShowReport","handleClearTargets","list","push","handleAddToExcludingFunctions","handleSync","handleClick","alert","key","event","value","setBruteForceType","setNmapOption","render","passwordOrPublicKey","targetsPrint","excludingsPrint","map","item","scan_started_or_not","sync_started_or_not","show_report_button","myJson","Object","keys","report"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Tabs from './components/Tabs'\nimport { JsonToTable } from \"react-json-to-table\";\n//import mongoose from 'mongoose/browser';\n\nrequire('./styles.css');\nclass App extends Component{\n  startInterval = 0;\n  constructor(props){\n    super(props);\n\n\n    this.state = {\n      bruteForceType: \"light\",\n      nmapOption: \"nmap --unprivileged -vv\",\n      bruteForcePath: \"/\",\n      publicKeyAuthentication: false,\n      username: \"\",\n      password: \"\",\n      publicKeyPath: \"\",\n      sshPort: \"22\",\n      targets: [],\n      target: \"\",\n      scan_started: false,\n      scan_status: -1,\n      sync_status: -1,\n      scan_id: -1,\n      show_report: false,\n      report0: {},\n      report1: {},\n      excluding_functions: [],\n      excluding_function: \"\",\n    };\n    this.handlePassword = this.handlePassword.bind(this);\n    this.handlePublicKeyPath = this.handlePublicKeyPath.bind(this);\n    this.handleUsername = this.handleUsername.bind(this);\n    this.handlePublicKeyAuthentication = this.handlePublicKeyAuthentication.bind(this);\n    this.handleAddToTargets = this.handleAddToTargets.bind(this);\n    this.handleTarget = this.handleTarget.bind(this);\n    this.handleExcludingFunction = this.handleExcludingFunction.bind(this);\n    this.handleSshPort = this.handleSshPort.bind(this);\n    this.handleBruteForcePath = this.handleBruteForcePath.bind(this);\n  }\n  componentDidMount(){\n  }\n  componentWillUnmount(){\n    clearInterval(this.startInterval);\n  }\n  postAxios(){\n    \n    fetch('http://127.0.0.1:8000')\n    .then(res => {\n      console.log(\"res: \",res)\n      res.json().then(val => console.log(\"val: \",val))\n    });\n  }\n\n  async isSyncOver()\n  {\n    try{\n      const response = await fetch('http://127.0.0.1:8001/sync/status', \n      \n      {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          id: \"scanid\"\n        })\n      });\n      //const res = response.text();\n      const response_json = await response.json();\n      this.setState({sync_status: 3, sync_started: false})\n      return response_json[\"status\"];\n    }\n    catch(err){\n      console.log(\"err: \", err);\n    }\n  }\n  async postGetStatus(scanid){\n    try{\n      const response = await fetch('http://127.0.0.1:8001/scan/status', \n      \n      {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          id: scanid\n        })\n      });\n      //const res = response.text();\n      const response_json = await response.json();\n      console.log(\"response_json['status']: \", response_json)\n      const xd = JSON.parse(JSON.stringify(response_json));\n      console.log(\"xd: \", xd);\n      \n      if(xd == 3){\n        this.setState({scan_status: 3, scan_started: false})\n        //alert(\"Scan is over, you can check the result!\");\n        return xd;\n      }\n    }\n    catch(err){\n      console.log(\"err: \", err);\n    }\n    return -1;\n  }\n  async postReq(isSync){\n      if(!isSync)\n      {\n          var scanid;\n          var targetsArr = \"[\\\"\"; \n          for(let i = 0; i < this.state.targets.length; i++){\n              if(i == this.state.targets.length -1){\n                targetsArr = targetsArr + this.state.targets[i]+\"\\\"]\";\n              }\n              else{\n                targetsArr = targetsArr + this.state.targets[i] + \"\\\", \\\"\";\n              }\n          }\n          var excludingsArr = \"[\\\"\"; \n          for(let i = 0; i < this.state.excluding_functions.length; i++){\n              if(i == this.state.excluding_functions.length -1){\n                excludingsArr = excludingsArr + this.state.excluding_functions[i]+\"\\\"]\";\n              }\n              else{\n                excludingsArr = excludingsArr + this.state.excluding_functions[i] + \"\\\", \\\"\";\n              }\n          }\n          if(this.state.excluding_functions.length == 0)\n            excludingsArr = \"[\\\"\\\"]\"\n          var data = '{\\\"ssh-username\\\":\\\"'+this.state.username+\n          '\\\", \\\"ssh-password\\\":\\\"'+this.state.password+\n          '\\\", \\\"ssh-port\\\":\\\"'+this.state.sshPort+\n          '\\\", \\\"targets\\\":' +targetsArr+\n          ', \\\"nmap\\\":\\\"' + this.state.nmapOption +\n          '\\\", \\\"brute-force-path\\\":\\\"'+this.state.bruteForcePath+\n          '\\\", \\\"excluding_functions\\\":'+ excludingsArr+\n          ', \\\"brute-force-type\\\":\\\"'+this.state.bruteForceType+'\\\"}'\n\n          console.log(\"data is: \", data)\n          try{\n              const response = await fetch('http://127.0.0.1:8001/scan/new', \n              {\n                method: 'POST',\n                //mode: 'no-cors', //methodu cors yaparsam \"net::ERR_EMPTY_RESPONSE\" hatasi aliyorum, no-cors yaparsam fetch basarılı oluyor fakat response.json() hata veriyor\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ \n                  data: data\n                })\n              });\n              //const res = response.text();\n              const response_json = await response.json();\n              scanid = response_json[\"$oid\"]\n              this.setState({scan_id: scanid})\n              console.log(\"response_json: \",response_json[\"$oid\"])\n          }\n          catch(err){\n                console.log(\"err: \", err);\n          }\n          if(this.state.scan_status != 3){\n            this.startInterval = setInterval(() => {\n              var status = this.postGetStatus(scanid);\n              console.log(\"status: \", status)\n              if(this.state.scan_status == 3){\n                this.setState({show_report: true});\n                console.log(\"status is 3\")\n              }\n              else{\n                console.log(\"status is not 3;\")\n              }\n            }, 2000);\n            }\n      }\n    else\n    {\n      try{\n        const response = await fetch('http://127.0.0.1:8001/sync/data', \n        {\n          method: 'POST',\n          //mode: 'no-cors', //methodu cors yaparsam \"net::ERR_EMPTY_RESPONSE\" hatasi aliyorum, no-cors yaparsam fetch basarılı oluyor fakat response.json() hata veriyor\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ \n            data: data\n          })\n        });\n        //const res = response.text();\n        const response_json = await response.json();\n        scanid = response_json[\"$oid\"]\n        this.setState({scan_id: scanid})\n        console.log(\"response_json: \",response_json[\"$oid\"])\n      }\n      catch(err){\n        console.log(\"err: \", err);\n      }\n      var status = this.isSyncOver();\n      this.setState({sync_started: false});\n      //alert(\"Successfuly downloaded datas from server!\");\n      /*this.startInterval = setInterval(() => {\n        \n        console.log(\"status: \", status)\n        if(this.state.sync_status == 3){\n          this.setState({sync_started: false});\n          console.log(\"status is 3\")\n        }\n        else{\n          console.log(\"status is not 3;\")\n        }\n      }, 2000);*/\n    }\n  }\n  async handleShowReport(){\n   try{\n     const response = await fetch('http://127.0.0.1:8001/report/get', \n     {\n       method: 'POST',\n       //mode: 'no-cors', //methodu cors yaparsam \"net::ERR_EMPTY_RESPONSE\" hatasi aliyorum, no-cors yaparsam fetch basarılı oluyor fakat response.json() hata veriyor\n       headers: { 'Content-Type': 'application/json' },\n       body: JSON.stringify({ \n         id: this.state.scan_id\n       })\n     });\n     //const res = response.text();\n     const response_json = await response.json();\n     console.log(\"response_json:\", response_json);\n     console.log(\"report0:\", response_json[\"0\"]);\n     this.setState({report0: response_json[\"targets\"][\"0\"], report1: response_json[\"targets\"][\"1\"], show_report: false})\n   }\n   catch(err){\n     console.log(\"err: \", err);\n   }\n  }\n\n  handleClearTargets(){\n    this.setState({targets: []});\n  }\n\n  handleAddToTargets(){\n    let list = this.state.targets;\n    list.push(this.state.target);\n    this.setState({targets: list, target:\"\"});\n  }\n\n  handleAddToExcludingFunctions(){\n    let list = this.state.excluding_functions;\n    list.push(this.state.excluding_function);\n    this.setState({excluding_functions: list, excluding_function:\"\"});\n  }\n\n\n  handleSync()\n  {\n    this.setState({sync_started: true});\n    this.postReq(true);\n  }\n  handleClick(){\n    \n    if(this.state[\"username\"].length === 0){\n      alert(\"username is empty pls add username!\")\n    }else if(this.state['targets'].length === 0){\n      alert(\"targets empty pls add some targets from scan options page!\")\n    }\nelse if(!this.state.publicKeyAuthentication && this.state['password'].length === 0){\n      alert(\"password is empty pls add password!\")\n    }\n    else if(this.state.publicKeyAuthentication && this.state[\"publicKeyPath\"].length === 0){\n      alert(\"Public key path is empty pls add path!\")\n    }\n    for(var key in this.state){\n      console.log(key,\": \",this.state[key]);\n    }\n    this.setState({scan_started:true})\n    this.postReq(false);\n  }\n\n  handleTarget(event){\n    this.setState({target: event.target.value});\n  }\n\n  handleExcludingFunction(event){\n    this.setState({excluding_function: event.target.value});\n  }\n\n  setBruteForceType(event) {\n    this.setState({bruteForceType: event.target.value});\n  }\n\n  setNmapOption(event){\n    this.setState({nmapOption: event.target.value});\n  }\n\n  handlePassword(event){\n    this.setState({password: event.target.value})\n  }\n\n  handlePublicKeyPath(event){\n    this.setState({publicKeyPath: event.target.value})\n  }\n\n  handleUsername(event){\n    this.setState({username: event.target.value})\n  }\n\n  handlePublicKeyAuthentication(){\n    this.setState({publicKeyAuthentication: !this.state.publicKeyAuthentication})\n  }\n\n  handleSshPort(event){\n    this.setState({sshPort: event.target.value})\n  }\n  handleBruteForcePath(event)\n  {\n    this.setState({bruteForcePath: event.target.value})\n\n  }\n  render(){\n    let passwordOrPublicKey;\n    let targetsPrint;\n    let excludingsPrint;\n    if(!this.state.publicKeyAuthentication){\n      passwordOrPublicKey = <label> Password: <input type=\"text\" value={this.state.password} onChange={this.handlePassword} /> </label>;\n    }\n    else{\n      passwordOrPublicKey = <label> Public Key Path: <input type=\"text\" value={this.state.publicKeyPath} onChange={this.handlePublicKeyPath} /> </label>;\n    }\n    if(this.state.targets.length === 0){\n      targetsPrint = <label> There are no targets!</label>\n    }\n    else{\n      targetsPrint = <label>Targets: <br/>\n        <ul>\n          {this.state.targets.map(item => (\n            <li key={item}>{item}</li>\n          ))}\n        </ul>\n        </label>\n    }\n    if(this.state.excluding_functions.length === 0){\n      excludingsPrint = <label> There are no excluding function!</label>\n    }\n    else{\n      excludingsPrint = <label>Excluding functions: <br/>\n        <ul>\n          {this.state.excluding_functions.map(item => (\n            <li key={item}>{item}</li>\n          ))}\n        </ul>\n        </label>\n    }\n    let scan_started_or_not;\n    let sync_started_or_not;\n    if(!this.state.scan_started){\n      scan_started_or_not = <button onClick={this.handleClick.bind(this)}>\n      Start\n      </button>\n    }\n    else{\n     scan_started_or_not =  <label>Scanning...</label>\n    }\n    if(!this.state.sync_started)\n    {\n      sync_started_or_not = <button onClick = {this.handleSync.bind(this)}>\n        Sync Data From Server\n      </button>\n    }\n    else{\n      sync_started_or_not = <label>Sync started, downloading datas...</label>\n    }\n    let show_report_button;\n    if(this.state.show_report){\n      show_report_button=<button onClick={this.handleShowReport.bind(this)}>\n      Report is ready, show report!\n      </button>\n    }\n    var myJson;\n    if(Object.keys(this.state.report0).length != 0){\n      console.log(\"this.state.report: \", this.state.report);\n      //myJson = this.state.report;\n    }\n    \n    return (\n      <div>\n        <h1>ZTP</h1>\n       <Tabs>\n        <div label=\"Main Page\">\n         {scan_started_or_not}\n         {sync_started_or_not}\n         {show_report_button}\n          <JsonToTable json={this.state.report0} />\n          <br />\n          <br />\n          <JsonToTable json={this.state.report1} />\n        </div>\n        <div label=\"Scan Options\">\n        <label>Use Public Key Authentication <input type=\"checkbox\" defaultChecked={this.state.publicKeyAuthentication} onChange={this.handlePublicKeyAuthentication} /> </label>\n        <br />\n        <label> Username: <input type=\"text\" value={this.state.username} onChange={this.handleUsername} /> </label>\n        {passwordOrPublicKey}\n            <br />\n            <br />\n        <label> SSH Port: <input type=\"text\" value={this.state.sshPort} onChange={this.handleSshPort} /> </label>\n            <br />\n            <br />\n         Select Brute Force Type\n          <div onChange={this.setBruteForceType.bind(this)}>\n            <input type=\"radio\" value=\"light\" name=\"bruteforce\" checked={this.state.bruteForceType === \"light\"}/> light\n            <input type=\"radio\" value=\"medium\" name=\"bruteforce\"checked={this.state.bruteForceType === \"medium\"}/> medium\n            <input type=\"radio\" value=\"heavy\" name=\"bruteforce\"checked={this.state.bruteForceType === \"heavy\"}/> heavy\n            <input type=\"radio\" value=\"optional\" name=\"bruteforce\"checked={this.state.bruteForceType === \"optional\"}/> optional\n          </div>\n            <br />\n            <br />\n          Enter Brute Force File Path (Needed to check optional, otherwise this wont be active.) (Example path: /home/username/passwords.txt)\n          <br />\n          <br />\n        <label>Path: <input type=\"text\" value={this.state.bruteForcePath} onChange={this.handleBruteForcePath} /> </label>\n            <br />\n            <br />\n         Select Nmap Option\n          <div onChange={this.setNmapOption.bind(this)}>\n            <input type=\"radio\" value=\"nmap --unprivileged -vv\" name=\"nmap\" checked={this.state.nmapOption === 'nmap --unprivileged -vv'}/> nmap --unprivileged -vv\n            <input type=\"radio\" value=\"nmap -sS -T4\" name=\"nmap\"checked={this.state.nmapOption === 'nmap -sS -T4'}/> nmap -sS -T4\n        </div> \n        <br/> \n        <br/>\n        <label> Excluding Function: <input type=\"text\" value={this.state.excluding_function} onChange={this.handleExcludingFunction} /> </label>\n        <button onClick={this.handleAddToExcludingFunctions.bind(this)}>\n            Add To Excluding Functions\n          </button>\n          <br />\n        {excludingsPrint}\n        <br/>\n        <br/>\n        <label> Target: <input type=\"text\" value={this.state.target} onChange={this.handleTarget} /> </label>\n        <button onClick={this.handleAddToTargets.bind(this)}>\n            Add To Targets\n          </button>\n          <br />\n        {targetsPrint}\n          \n        </div>\n      </Tabs>\n      </div>\n    );\n  }\n}\n\n\nexport default App;"]},"metadata":{},"sourceType":"module"}